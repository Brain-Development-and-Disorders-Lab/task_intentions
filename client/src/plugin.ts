/**
 * @file Plugin file containing code establishing a jsPsych plugin for the
 * Intentions Game. Configures data storage and displays a React screen
 * to the participant. Handles the end of the trial by storing data and
 * cleaning up the display.
 * @author Henry Burgess <henry.burgess@wustl.edu>
 */

// Logging library
import consola from "consola";

// Configuration
import { Configuration } from "./configuration";

// Core modules
import ScreenPropFactory from "src/lib/classes/factories/ScreenPropFactory";
import View from "src/lib/view";
import Handler from "src/lib/classes/Handler";

jsPsych.plugins[Configuration.studyName] = (() => {
  const plugin = {
    info: {},
    trial: (_displayElement: HTMLElement, _trial: Trial) => {
      // Should raise an error
      consola.error(`Not implemented.`);
    },
  };

  plugin.info = {
    name: Configuration.studyName,
    parameters: {
      optionOneParticipant: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: "Option One Participant",
        default: 0,
        description: "Number of points for the participant in option one.",
      },
      optionOnePartner: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: "Option One Partner",
        default: 0,
        description: "Number of points for the partner in option one.",
      },
      optionTwoParticipant: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: "Option Two Participant",
        default: 0,
        description: "Number of points for the participant in option two.",
      },
      optionTwoPartner: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: "Option Two Partner",
        default: 0,
        description: "Number of points for the partner in option two.",
      },
      typeOne: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: "Type One",
        default: "",
        description: "The type of option one.",
      },
      typeTwo: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: "Type Two",
        default: "",
        description: "The type of option two",
      },
      display: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: "Type of trial screen",
        default: undefined,
        description: "The type of trial screen to display",
      },
      answer: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: "Correct answer",
        default: "",
        description: "The correct answer to select",
      },
      isPractice: {
        type: jsPsych.plugins.parameterType.BOOLEAN,
        pretty_name: "Trial is a practice trial",
        default: false,
        description: "Show feedback to participants",
      },
      fetchData: {
        type: jsPsych.plugins.parameterType.BOOLEAN,
        pretty_name: "Enable or disable server queries",
        default: false,
        description: "Used exclusively in the 'Matching' screen",
      },
      clearScreen: {
        type: jsPsych.plugins.parameterType.BOOLEAN,
        pretty_name: "Clear after trial",
        default: false,
        description: "Clear the screen after this trial",
      },
    },
  };

  plugin.trial = (displayElement: HTMLElement, trial: Trial) => {
    // Get the global 'Experiment' instance
    const experiment = window.Experiment;

    // Setup the trial data to be stored
    const dataframe: TrialData = {
      trial: trial.trial,
      display: trial.display, // the display type
      participantID: experiment.getState().get("participantID"),
      playerPoints_option1: trial.optionOneParticipant,
      partnerPoints_option1: trial.optionOnePartner,
      playerPoints_option2: trial.optionTwoParticipant,
      partnerPoints_option2: trial.optionTwoPartner,
      playerPoints_selected: NaN,
      partnerPoints_selected: 0,
      selectedOption_player: NaN, // option selected by participant
      realAnswer: trial.answer,
      correctGuess: NaN, // whether or not the participant guessed correctly
      inferenceResponse_Selfish: NaN,
      inferenceResponse_Harm: NaN,
      agencyResponse: NaN, // float response to agency question
      classification: "", // classification string selected by participant
      trialDuration: NaN, // duration of the trial in ms
      server_alpha_ppt: NaN, // parameters generated by server
      server_beta_ppt: NaN, // parameters generated by server
      server_alpha_par: NaN, // parameters generated by server
      server_beta_par: NaN, // parameters generated by server
    };

    // Disable keyboard input beforehand
    document.addEventListener("keydown", () => {
      return false;
    });

    if (Configuration.manipulations.requireID === true) {
      // Determine the ID of the participant
      const inputData = jsPsych.data.get().filter({
        trial_type: 'survey-html-form'
      }).values()[0].response.participantID;

      const validInputID =
        inputData.length === 8 &&
        /[0-9]{8}/.test(inputData);

      if (validInputID === true) {
        // Check first if a participant ID has been specified
        const givenID = jsPsych.data.get().filter({
          trial_type: 'survey-html-form'
        }).values()[0].response?.participantID;

        // Update the participant ID
        consola.debug("Using given ID:", givenID);
        experiment.getState().set("participantID", givenID);
      }
    } else {
      // If no custom participant ID has been required, generate our own
      // to ensure the system works
      if (experiment.getState().get("participantID") === "default") {
        consola.debug(`Generating custom participant ID...`);
        experiment.getState().set("participantID", `7000${Math.round(performance.now() * experiment.random())}`.slice(0, 8));
        consola.debug(
          `Generated participant ID:`,
          experiment.getState().get("participantID")
        );
      } else {
        consola.debug(
          `Using participant ID:`,
          experiment.getState().get("participantID")
        );
      }
    }

    const startTime = performance.now();

    // Display the screen with the generated props
    const view = new View(displayElement);

    /**
     * Finish the trial and unmount React components
     */
    const finish = () => {
      // Record the total reaction time
      dataframe.trialDuration = performance.now() - startTime;

      if (trial.display.startsWith("player")) {
        // 'player-' trials include transitions at the end of the
        // trial after participant selection
        dataframe.trialDuration = dataframe.trialDuration - 2250;
      }
      consola.debug(`Reaction time: ${dataframe.trialDuration}ms`);

      // If the next trial isn't React-based, clean up React
      if (trial.clearScreen === true) {
        view.unmount();
      }

      // Re-enable keyboard actions
      document.removeEventListener("keydown", () => {
        return false;
      });

      // Finish the jsPsych trial
      jsPsych.finishTrial(dataframe);
    };

    // Create the Handler instance
    const handler = new Handler(dataframe, finish);

    // Create a new ScreenPropFactory
    const displayProps = new ScreenPropFactory(trial, handler).generate();

    // Display the view
    view.display(trial.display, displayProps, displayElement);
  };

  return plugin;
})();
